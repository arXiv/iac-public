name: 'Service Deployment Routing'
description: 'Route deployment based on branch/PR status and trigger appropriate deployment'

inputs:
  image_tag:
    description: 'Docker image tag to deploy'
    required: true
  deploy_workflow:
    description: 'Path to the deploy workflow to call'
    required: true
  workload_identity_provider:
    description: 'Workload identity provider for GCP authentication'
    required: true
  service_account:
    description: 'Service account for GCP authentication'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set GitHub token
      run: echo "GH_TOKEN=${{ github.token }}" >> $GITHUB_ENV
      shell: bash
      
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate with arxiv-development
      uses: google-github-actions/auth@v3
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v3

    - name: Service Deployment Routing
      id: check_env
      run: |
        # env | sort

        if [ "${{ github.ref_name }}" = "main" ]; then
          # For main branch, deploy to multiple environments by updating "envs=" with the environment names (comma-separated)
          echo "envs=development" >> $GITHUB_OUTPUT
          echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          echo "Deploying to multiple environments with latest tag"
        else

          # Check deployment logic based on event type and PR status
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.base_ref }}" = "main" ]; then
            # This is a PR to main - deploy it
            echo "This is a PR to main - proceeding with deployment"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # This is a PR to another branch - check if there's a PR to main
            pr_to_main_exists=$(gh pr list --head "${{ github.head_ref }}" --base main --state open --json number --jq length)
            if [ "$pr_to_main_exists" -gt 0 ]; then
              echo "PR to main exists, skipping this deployment in preference of the 'PR to main'"
              exit 0
            fi
            # Check if this branch has PRs to other bases (not main)
            prs_to_other_bases=$(gh pr list --head "${{ github.head_ref }}" --state open --json baseRefName --jq '[.[] | select(.baseRefName != "main")] | length')
            if [ "$prs_to_other_bases" -gt 0 ]; then
              echo "Branch has PRs to other bases (not main), skipping deployment to avoid conflicts"
              exit 0
            fi
            echo "No PR to main exists, proceeding with deployment"
          else
            # This is a branch build - check if there are ANY PRs involving this branch
            prs_as_head=$(gh pr list --head "${{ github.ref_name }}" --state open --json number --jq length)
            prs_as_base=$(gh pr list --base "${{ github.ref_name }}" --state open --json number --jq length)
            total_prs=$((prs_as_head + prs_as_base))
            if [ "$total_prs" -gt 0 ]; then
              echo "Found $total_prs PR(s) involving branch '${{ github.ref_name }}' - skipping deployment"
              exit 0
            fi
            echo "No PR to main exists, proceeding with deployment"
          fi

          # determine the name of the ephemeral environment (we had to put rules on this with respect to the cloud provider and our sanity)
          eph_env="${GITHUB_REPOSITORY//\//-}-$([ "${{ github.event_name }}" = "pull_request" ] && echo "$GITHUB_HEAD_REF" || echo "$GITHUB_REF_NAME")"
          eph_env=$(echo "$eph_env" | tr '[:upper:]' '[:lower:]')
          # Replace single-quote, double-quote, space, and exclamation point with hyphens
          eph_env=$(echo "$eph_env" | tr "' \"!" '-')
          # Truncate to 30 characters
          eph_env=$(echo "$eph_env" | cut -c1-30)
          echo "Checking for GCP project: $eph_env"
          
          # Check if GCP project exists
          if gcloud projects describe "$eph_env" --quiet 2>/dev/null; then
            echo "envs=$eph_env" >> $GITHUB_OUTPUT
            echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "Ephemeral environment found: $eph_env"
          else
            echo "envs=" >> $GITHUB_OUTPUT
            echo "image_tag=" >> $GITHUB_OUTPUT
            echo "No ephemeral environment found for: $eph_env"
            exit 0
          fi
        fi
      shell: bash

    - name: Trigger Service Deployment
      if: steps.check_env.outputs.envs != ''
      run: |
        IFS=',' read -ra ENVS <<< "${{ steps.check_env.outputs.envs }}"
        for env in "${ENVS[@]}"; do
          echo "Triggering deployment to: $env"
          # Try using the workflow file path first
          if ! gh workflow run .github/workflows/${{ inputs.deploy_workflow }} \
            --repo ${{ github.repository }} \
            --ref "${{ github.head_ref || github.ref_name }}" \
            -f env="$env" \
            -f image_tag="${{ steps.check_env.outputs.image_tag }}"; then
            echo "Failed to trigger workflow, trying alternative method..."
            exit 1
          fi
        done
      shell: bash
